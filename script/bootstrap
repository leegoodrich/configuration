#!/usr/bin/env bash
#
# bootstrap installs things.

set -e

CONFIG_REPO="https://github.com/leegoodrich/configuration.git"

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

establish_config_directory () {
    if [ -z "$CONFIG_ROOT" ]; then
        local config=`dirname $(find $HOME -name .configroot -maxdepth 2 -print -quit) 2>/dev/null`

        if [ -n "$config" ]; then
            echo "found $config"
            export CONFIG_ROOT=$config
        else
            echo "did not find $config"
            export CONFIG_ROOT=$HOME/Configuration
        fi
    fi 

    if [ ! -f "$CONFIG_ROOT/.configroot" ]; then
        user " - No configuration root found. Should I clone '$CONFIG_REPO' into '$CONFIG_ROOT'? (y/N)"
        read -n 1 -r
        echo

        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            git clone $CONFIG_REPO $CONFIG_ROOT

            if [ $? -ne 0 ]; then
                fail "Could not clone configuration repository. Bailing"
            fi
            return 0
        fi

        exit 1 # Only gets here if answer is no or something messes up
    fi
}

setup_gitconfig () {
  if ! [ -f $CONFIG_ROOT/git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $CONFIG_ROOT -maxdepth 4 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

run_install_scripts () {
    info "Running install scripts"
    # find the installers and run them iteratively. Skip any backups folders
    find $CONFIG_ROOT -path backups -prune -o -name install.sh -print | while read installer ; do 
        sh -c "${installer}"
        success "${installer} ran successfully"
    done
}

echo ''

establish_config_directory
setup_gitconfig
install_dotfiles
run_install_scripts

echo ''
echo '  All installed!'
